dumb node api
  user
    get my deep stats (later)
      how many votes turned into moves (mongo aggregate ideally)
    create account
      email verifiction
      saves in mongo
    verify email
    forgot password
    update password
    login
      checks mongo

fast api gateway
  game
    get round stats
      current faction token for user id
      how many votes this round
    vote 
      checks redis STOP
        returns 412 
      checks redis to see if account exists
        if not then check mongo
          update redis with success otherwise
      checks if user has votes left
        if not die
      ++ user vote
      gets memcached game layout
      gets memcached game state
      evaluates if its a valid move
        if not die
      adds vote to mongo



dumb server
  round manager
    5 minute cron
      runs round end
    10 second cron
      runs update round state
    30 minute cron
      runs vote aggregate
    
update round state
  reads votes from mongo (aggregate)
  uplaods file to s3

round end
  sends redis STOP
  read all votes from mongo
  evaluates them 
  updates layout in s3
  updates layout in redis
  generates a new faction token for each faction
  updates game state in s3 with faction token
  updates game state in redis with no faciton token
  dumps users votes from redis
  updates memcached for current game round
  sends redis START
  
vote aggregate
  aggregate all votes from mongo that are before the current round
  and insert them into user stats cleanly and nested
  then delete them

setup everything
  create new game layout
  create initial game state
  start new round
    

user flow
  game join
    download the s3 layout
    call top of round
  top of every round
    download the s3 game state 
    hit api for round stats 
    decrypt game state with faction token
    determine how much time is left in the round
    download the s3 round state from s3 every 5 seconds
    allow user to vote
    

s3
  stores the json layout
  stores the current game state 
  stores the current round state
  
memcached 
  json game layout (for caching in lambda)
  json game state (for caching in lambda)
  
redis
  is game stopped for calculating
  current round (when it started, will end)
  users vote count ++ --
    key is `${userid}-${round}` and the expire is round duration * 2
  warm user details
    access token
    faction 
    max votes
    

user
  email
  password
  faction
  max number of votes per round

mongo user stats
  each vote
    with outcome
  number of units killed with their votes idk
  
vote
  userid
  datetime utc
  faction
  ip
  unit voted on 
  
  
game layout
  the positions of water mountains etc

game state
  stats of each piece on the board
    encrypted with the faction token 
    id x y position
    health
  round number
  time of round start
  time of round end
    

round state
  time hash so someone can compare
  each unit id
    each action
      vote count


resources
  only infantry can mine resources
  has to be within 3 radius
  takes one turn to mine
  ++ on the factions resource count
  any factory can now produce a new unit
    infantry costs 3 resource
    tank cost 5
    plane cost 7


