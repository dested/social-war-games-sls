service: swg

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-step-functions
  - serverless-step-functions-local
  - serverless-offline
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  accountId: 114394156384
  websocketsApiName: swg-socket
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - s3:GetObjectAcl
        - s3:GetObject
        - s3:GetObjectTagging
        - s3:DeleteObject
        - s3:DeleteObjectVersion
        - s3:PutObject
        - s3:PutObjectTagging
        - s3:PutObjectAc
      Resource: "*"

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
  customDomain:
    rest:
      domainName: api.socialwargames.com
      basePath: ''
      stage: ${self:provider.stage}
      createRoute53Record: true
    websocket:
      domainName: ws.socialwargames.com
      basePath: ''
      stage: ${self:provider.stage}
      createRoute53Record: true
      endpointType: 'regional'
      certificateName: socialwargames.com
      securityPolicy: tls_1_2
  serverless-offline:
    host: 0.0.0.0
    noPrependStageInUrl: true
    httpPort: 5103
  lambda:
    host: 0.0.0.0
    region: us-west-2
    port: 9898
  stepFunctionsLocal:
    accountId: 114394156384
    region: us-west-2
    lambdaEndpoint: http://localhost:3002
    TaskResourceMapping:
      Iterator: arn:aws:lambda:us-west-2:114394156384:function:swg-dev-iterator
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: swg-connections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: gameIdFactionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: GameFactionIndex
            KeySchema:
            - AttributeName: gameIdFactionId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    redisTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: redis-table
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

stepFunctions:
  stateMachines:
    workRunner:
      name: workRunner
      definition:
        StartAt: Iterator
        States:
          Iterator:
            Type: Task
            ResultPath: "$.iterator"
            Resource:
              Fn::GetAtt: [iterator, Arn]
            Next: IsCountReached
          IsCountReached:
            Type: Choice
            Choices:
              - Variable: "$.iterator.continue"
                BooleanEquals: true
                Next: "Wait"
            Default: Done
          Wait:
            Type: Wait
            Seconds: 10
            Next: Iterator
          Done:
            Type: Pass
            End: true
  validate: true


functions:
  vote:
    handler: handler.vote
    memorySize: 256
    events:
      - http:
          path: vote
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  user-details:
    handler: handler.userDetails
    memorySize: 256
    events:
      - http:
          path: user-details
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  register:
    handler: handler.register
    events:
      - http:
          path: register
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  login:
    handler: handler.login
    events:
      - http:
          path: login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  ladder:
    handler: handler.ladder
    events:
      - http:
          path: ladder
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  get-games:
    handler: handler.getGames
    memorySize: 128
    events:
      - http:
          path: games
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  start-worker:
    handler: handler.startWorker
    memorySize: 128
    events:
      - http:
          path: start-worker
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  stop-worker:
    handler: handler.stopWorker
    memorySize: 128
    events:
      - http:
          path: stop-worker
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  iterator:
    handler: iteratorHandler.iterator
    memorySize: 128
  setup:
    handler: functions/setup.setupHandler
    memorySize: 128
    events:
      - http:
          path: --setup
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  work:
    handler: functions/work.workHandler
    memorySize: 256
  roundUpdate:
    handler: functions/roundUpdate.roundUpdateHandler
    memorySize: 256
  connect:
    handler: socketHandler.connect
    events:
      - websocket: $connect
  disconnect:
    handler: socketHandler.disconnect
    events:
      - websocket: $disconnect
