service: swg

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline
  - serverless-dynamodb-local

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
  customDomain:
    domainName: api.socialwargames.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  serverless-offline:
    host: 0.0.0.0
    noPrependStageInUrl: true
    httpPort: 5103
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  websocketsApiName: swg-socket
  websocketsApiRouteSelectionExpression: $request.body.action

resources: # CloudFormation template syntax from here on.
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: swg-connections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: gameIdFactionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: GameFactionIndex
            KeySchema:
            - AttributeName: gameIdFactionId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  vote:
    handler: handler.vote
    memorySize: 256
    events:
      - http:
          path: vote
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  user-details:
    handler: handler.userDetails
    memorySize: 256
    events:
      - http:
          path: user-details
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  register:
    handler: handler.register
    events:
      - http:
          path: register
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  login:
    handler: handler.login
    events:
      - http:
          path: login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  ladder:
    handler: handler.ladder
    events:
      - http:
          path: ladder
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  getGames:
    handler: handler.getGames
    memorySize: 128
    events:
      - http:
          path: games
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - GameId
  connect:
    handler: socketHandler.connect
    events:
      - websocket: $connect
  disconnect:
    handler: socketHandler.disconnect
    events:
      - websocket: $disconnect
