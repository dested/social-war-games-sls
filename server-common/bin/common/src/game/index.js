"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hex_1 = require("../hex/hex");
class GameEntity {
}
exports.GameEntity = GameEntity;
class GameLogic {
    static buildGame(layout, gameState) {
        const grid = new hex_1.Grid(0, 0, 50, 50);
        const factions = gameState.factions.split('');
        for (let i = 0; i < layout.hexes.length; i++) {
            const hex = layout.hexes[i];
            const gameHexagon = new GameHexagon(HexagonTypes.get(hex.type, hex.subType), hex.id, hex.x, hex.y);
            gameHexagon.setFactionId(factions[i]);
            grid.hexes.push(gameHexagon);
        }
        const entities = [
            ...gameState.entities['1'].map(a => ({
                factionId: '1',
                id: a.id,
                health: a.health,
                x: a.x,
                y: a.y,
                entityType: a.entityType
            })),
            ...gameState.entities['2'].map(a => ({
                factionId: '2',
                id: a.id,
                health: a.health,
                x: a.x,
                y: a.y,
                entityType: a.entityType
            })),
            ...gameState.entities['3'].map(a => ({
                factionId: '3',
                id: a.id,
                health: a.health,
                x: a.x,
                y: a.y,
                entityType: a.entityType
            }))
        ];
        return {
            generation: gameState.generation,
            grid,
            entities
        };
    }
    static createGame() {
        const grid = new hex_1.Grid(0, 0, 50, 50);
        const entities = [];
        for (let y = 0; y < 50; y++) {
            for (let x = -Math.floor(y / 2); x < 50 - Math.floor(y / 2); x++) {
                grid.hexes.push(new GameHexagon(HexagonTypes.dirt(HexagonTypes.randomSubType()), `${x}-${y}`, x, y));
            }
        }
        const center1 = grid.easyBounds(Math.floor(grid.boundsWidth * (1 / 3)), Math.floor(grid.boundsHeight * (1 / 3)));
        const center2 = grid.easyBounds(Math.floor(grid.boundsWidth * (2 / 3)), Math.floor(grid.boundsHeight * (1 / 3)));
        const center3 = grid.easyBounds(Math.floor(grid.boundsWidth * (1 / 2)) - 1, Math.floor(grid.boundsHeight * (2 / 3)));
        for (const hex of grid.getCircle(center1, 7)) {
            hex.setFactionId('1');
        }
        for (const hex of grid.getCircle(center2, 7)) {
            hex.setFactionId('2');
        }
        for (const hex of grid.getCircle(center3, 7)) {
            hex.setFactionId('3');
        }
        /*   for (let i = 0; i < 30; i++) {
            const center = grid.hexes[Math.floor(Math.random() * grid.hexes.length)];
            if (center.factionId === '0') {
                i--;
                continue;
            }
            const newSpot = grid.hexes[Math.floor(Math.random() * grid.hexes.length)];

            for (const gameHexagon of grid.getLine(center, newSpot)) {
                gameHexagon.setFactionId(center.factionId);
            }
        }*/
        for (let i = 0; i < 120; i++) {
            const center = grid.hexes[Math.floor(Math.random() * grid.hexes.length)];
            const type = Math.random() * 100 < 60
                ? HexagonTypes.grass
                : Math.random() * 100 < 50 ? HexagonTypes.clay : HexagonTypes.stone;
            for (const gameHexagon of grid.getCircle(center, Math.floor(Math.random() * 4))) {
                gameHexagon.setTileType(type(HexagonTypes.randomSubType()));
            }
        }
        for (let i = 1; i <= 3; i++) {
            const factionId = i.toString();
            for (let i = 0; i < 30; i++) {
                const hex = grid.hexes[Math.floor(Math.random() * grid.hexes.length)];
                if (hex.factionId !== factionId) {
                    i--;
                    continue;
                }
                if (entities.find(a => a.x === hex.x && a.y === hex.y))
                    continue;
                entities.push({
                    id: this.nextId(),
                    factionId: hex.factionId,
                    health: 10,
                    x: hex.x,
                    y: hex.y,
                    entityType: Math.random() * 100 < 65 ? 'infantry' : Math.random() * 100 < 60 ? 'tank' : 'plane'
                });
            }
        }
        entities.push({
            id: this.nextId(),
            factionId: '1',
            health: 20,
            x: center1.x,
            y: center1.y,
            entityType: 'factory'
        });
        entities.push({
            id: this.nextId(),
            factionId: '2',
            health: 20,
            x: center2.x,
            y: center2.y,
            entityType: 'factory'
        });
        entities.push({
            id: this.nextId(),
            factionId: '3',
            health: 20,
            x: center3.x,
            y: center3.y,
            entityType: 'factory'
        });
        const line = [
            ...grid.getLine(grid.easyBounds(3, 0), grid.easyBounds(3, 25)),
            ...grid.getLine(grid.easyBounds(4, 0), grid.easyBounds(4, 25)),
            ...grid.getLine(grid.easyBounds(5, 0), grid.easyBounds(5, 25))
        ];
        for (const gameHexagon of line) {
            gameHexagon.setTileType(HexagonTypes.water(HexagonTypes.randomSubType()));
        }
        return {
            generation: 1,
            grid,
            entities
        };
    }
    static nextId() {
        return (++this.id).toString();
    }
    static validateVote(game, vote) {
        const entity = game.entities.find(a => a.id === vote.entityId);
        if (!entity)
            return false;
        if (entity.factionId !== vote.factionId)
            return false;
        const fromHex = game.grid.hexes.find(a => a.x === entity.x && a.y === entity.y);
        if (!fromHex)
            return false;
        const toHex = game.grid.hexes.find(a => a.id === vote.hexId);
        if (!toHex)
            return false;
        const path = game.grid.findPath(fromHex, toHex);
        if (path.length === 0)
            return false;
        const entityDetails = exports.EntityDetails[entity.entityType];
        let range = 0;
        switch (vote.action) {
            case 'attack':
                range = entityDetails.attackRadius;
                break;
            case 'move':
                range = entityDetails.moveRadius;
                break;
            case 'spawn':
                range = entityDetails.spawnRadius;
                break;
        }
        if (path.length > range)
            return false;
        const toEntity = game.entities.find(a => a.x === toHex.x && a.y === toHex.y);
        switch (vote.action) {
            case 'attack':
                if (!toEntity)
                    return false;
                if (toEntity.factionId === entity.factionId) {
                    return false;
                }
                break;
            case 'move':
                if (toEntity)
                    return false;
                break;
            case 'spawn':
                if (toEntity)
                    return false;
                if (entityDetails.spawnRadius === 0)
                    return false;
                break;
        }
        return true;
    }
}
GameLogic.id = 0;
exports.GameLogic = GameLogic;
class HexagonTypes {
    static randomSubType() {
        if (Math.random() * 100 < 90)
            return '1';
        return (Math.floor(Math.random() * 5) + 1).toString();
    }
    static get(type, subType) {
        switch (type) {
            case 'Dirt':
                return this.dirt(subType);
            case 'Clay':
                return this.clay(subType);
            case 'Grass':
                return this.grass(subType);
            case 'Stone':
                return this.stone(subType);
            case 'Water':
                return this.water(subType);
        }
    }
}
HexagonTypes.dirt = (subType) => ({
    type: 'Dirt',
    subType,
    cost: 1,
    blocked: false
});
HexagonTypes.grass = (subType) => ({
    type: 'Grass',
    subType,
    cost: 2,
    blocked: false
});
HexagonTypes.clay = (subType) => ({
    type: 'Clay',
    subType,
    cost: 3,
    blocked: false
});
HexagonTypes.stone = (subType) => ({
    type: 'Stone',
    subType,
    cost: 4,
    blocked: false
});
HexagonTypes.water = (subType) => ({
    type: 'Water',
    subType,
    cost: 0,
    blocked: true
});
exports.HexagonTypes = HexagonTypes;
exports.EntityDetails = {
    ['factory']: {
        moveRadius: 0,
        health: 30,
        attackRadius: 0,
        attackPower: 0,
        ticksToSpawn: 0,
        healthRegenRate: 0,
        solid: true,
        spawnRadius: 4
    },
    ['tank']: {
        moveRadius: 4,
        health: 8,
        attackRadius: 8,
        attackPower: 3,
        ticksToSpawn: 3,
        healthRegenRate: 1,
        solid: false,
        spawnRadius: 0
    },
    ['plane']: {
        moveRadius: 10,
        health: 2,
        attackRadius: 3,
        attackPower: 3,
        ticksToSpawn: 4,
        healthRegenRate: 1,
        solid: false,
        spawnRadius: 0
    },
    ['infantry']: {
        moveRadius: 8,
        health: 4,
        attackRadius: 3,
        attackPower: 1,
        ticksToSpawn: 2,
        healthRegenRate: 1,
        solid: false,
        spawnRadius: 2
    }
};
class GameHexagon extends hex_1.Hexagon {
    constructor(tileType, id, x, y) {
        super(x, y, tileType.cost, tileType.blocked);
        this.tileType = tileType;
        this.id = id;
        this.factionId = '0';
    }
    setTileType(tileType) {
        this.tileType = tileType;
        this.cost = tileType.cost;
        this.blocked = tileType.blocked;
    }
    setFactionId(factionId) {
        this.factionId = factionId;
    }
}
exports.GameHexagon = GameHexagon;
//# sourceMappingURL=data:application/json;base64,